@startuml RPC
    class RPCHelpMan
    class RPCResult
class RPCHelpMan{
    +RPCHelpMan(string name, string description, vector<RPCArg> args, RPCResults results, RPCExamples examples)
    +UniValue HandleRequest(const JSONRPCRequest& request)
    +string ToString()
    +UniValue GetArgMap()
    +bool IsValidNumArgs(size_t num_args)
    +vector<std::string> GetArgNames()
    +string m_name
    #RPCMethodImpl m_fun
    #string m_description
    #RPCResults m_results
    #vector<RPCArg> m_args
    #RPCExamples m_examples
}
class RPCResult {
    +Type m_type
    +string m_key_name
    +vector<RPCResult> m_inner
    +bool m_optional;
    +bool m_skip_type_check;
    +string m_description;
}    
class RPCResults {
    +vector<RPCResult> m_results
    +std::string ToDescriptionString()
}    
class RPCExamples {
    +std::string m_examples
    +RPCExamples(string examples)
}
class RPCArg {
    +GetFirstName()
    +GetName()
    +IsOptional()
    +ToDescriptionString()
    +ToString()
    +ToStringObject()
    +string m_names
    +Type m_type
    +bool m_hidden
    +vector<RPCArg> m_inner
    +Fallback m_fallback
    +string m_description
    +string m_oneline_description
    +vector<string> m_type_str
}
RPCResult -o RPCResults::m_results
RPCResult --o RPCResult
RPCArg     o-- RPCArg
RPCHelpMan::m_examples o-- RPCExamples
JSONRPCRequest -o RPCHelpMan::m_fun
RPCHelpMan::m_args o--  RPCArg
RPCResults --o RPCHelpMan::m_results
note left of RPCHelpMan::m_fun
    RPCMethodImpl = function<UniValue(const RPCHelpMan&, const JSONRPCRequest&)>
end note    
@enduml
